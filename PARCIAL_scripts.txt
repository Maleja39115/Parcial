
Maria Alejandra Cano Vargas

--1 - Generar una función que retorne cuantos años tiene una persona.

CREATE OR REPLACE FUNCTION f_edad(p_nacimiento DATE) 
RETURN NUMBER IS
    v_edad NUMBER;
BEGIN
    SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, p_nacimiento) / 12)
    INTO v_edad
    FROM dual;
    
    RETURN v_edad;
END;


SELECT f_edad(birthdate) AS edad
FROM persons WHERE persons_id =91;

--2 - Los niños y viejos y enfermos no pueden trabajar en la mina. por ello cree un trigger
que sea capaz de garantizar que ningún empleado viole esas restricciones.
Nota: niño es considerado inferior a 12 años y un viejo es alguien mayor de 70 años.Recuerda que no se admiten personas enfermas.

CREATE OR REPLACE TRIGGER tr_restriccion
BEFORE INSERT OR UPDATE ON persons FOR EACH ROW
 DECLARE
   var_edad NUMBER;
   var_salud NUMBER;
   
BEGIN
  var_edad:= EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM :NEW.birthdate);
    
 IF var_edad< 12 OR var_edad > 70 THEN
 RAISE_APPLICATION_ERROR(-20001, 'No se permiten niños ni ancianos en la mina');
   END IF;
   
  SELECT diagnostics_id INTO var_salud FROM persons_medical_check  WHERE persons_id = :NEW.persons_id;
    IF var_salud != 1 THEN
    RAISE_APPLICATION_ERROR(-20002, 'No se admiten enfermos en la mina');
      END IF;
END;

INSERT INTO persons VALUES (1001,'Noah','Garcia','M',TO_DATE('2024-1-1', 'yyyy/mm/dd'));

--3 - Cree un procedimiento que registre un trabajador. tabla: workers Nota: validar que la
persona exista antes de registrar como trabajador.

CREATE OR REPLACE PROCEDURE 
registrar_trabajador(var_worker_id workers.workers_id%type,var_mines_id workers.mines_id%type,var_person_id workers.persons_id%type)
AS
  var_check_id number;
  
BEGIN
 SELECT COUNT(*) INTO var_check_id FROM persons WHERE persons_id = var_person_id;
  
IF var_check_id= 0 THEN
   RAISE_APPLICATION_ERROR(-20001,'La persona no esta registrada.');
ELSE
    INSERT INTO workers VALUES (var_worker_id, var_mines_id, var_person_id,SYSDATE);
    DBMS_OUTPUT.PUT_LINE('Trabajador registrado ');    
     END IF;
END;

--4 - Crear un cursor que muestre el id, nombre, apellido, fecha de nacimiento de todas las
mujeres que trabajan en una mina, la mina debe ser indicada por entrada de teclado.

CREATE OR REPLACE PROCEDURE mujeres_mina(mine mines.mine_name%type )
AS
 BEGIN
  FOR i IN(SELECT p.persons_id as person_, p.name as nameP_, p.lastname as lastN_, p.birthdate as birthD_ FROM persons p 
   INNER JOIN workers w ON p.persons_id = w.persons_id  
   INNER JOIN mines m ON w.mines_id = m.mines_id 
   WHERE LOWER(m.mine_name) = LOWER(mine) AND p.sex = 'F') LOOP
    DBMS_OUTPUT.PUT_LINE('mujer_id: '||i.person_||' |Nombre: '||i.nameP_||' |Apellidos: '||i.lastN_||' |Fecha_Nacimiento: '||i.birthD_);
END LOOP;
END;

--5 - crear una función que retorne si un trabajador está vivo o muerto.

CREATE OR REPLACE FUNCTION vivo_muerto(worker workers.workers_id%TYPE)
RETURN VARCHAR2
  IS
    var_person_estado NUMBER;
    var_boolean boolean;
 BEGIN
   BEGIN
       var_boolean:=true;
  SELECT persons_id into var_person_estado FROM persons_defuntions WHERE persons_id=worker;
    RETURN 'EL trabajador con ID: '||worker||' no esta con vida';
    
  EXCEPTION
    WHEN NO_DATA_FOUND THEN var_boolean:=false;
      RETURN 'El trabajador con ID: '||worker||' esta con vida';
  END;
END;
SELECT vivo_muerto(837) FROM dual;

--6 - crear una función que retorne la cantidad de kilos que produce de una mina.

CREATE OR REPLACE FUNCTION kilos_mina(mine mines.mine_name%TYPE)
RETURN VARCHAR
 IS
    var_count_kg varchar(400);
    mina_kgs NUMBER;
BEGIN

    SELECT SUM(pw.KG_PRODUCT)as mina_kgs into mina_kgs FROM PRODUCT_WORKER pw inner join mines m on pw.PRODUCTS_ID= m.PRODUCTS_ID 
    AND LOWER(m.mine_name)=LOWER(mine) GROUP BY m.mine_name;
    
      RETURN 'Mina: '||mine||' cantidad total de kilos: '||mina_kgs||' Kg';
END;

SELECT kilos_mina('&Ingrese_mina') FROM dual;

--7 - Generar un CURSOR de trabajadores que muestre:id, nom, apellido, sexo, edad de todos los menores de edad que han muerto.

DECLARE
  CURSOR fallecidos_data
IS

  SELECT p.persons_id AS id_person, p.name AS nameP, p.lastname AS lastN, p.sex AS sexP,(sysdate - p.birthdate)/365 AS ageP FROM persons p
  INNER JOIN persons_defuntions pf ON pf.persons_id = p.persons_id WHERE (sysdate - p.birthdate) <= 6570 ;
BEGIN

FOR i IN fallecidos_data LOOP
DBMS_OUTPUT.PUT_LINE('ID: ' || i.id_person ||'  Nombre: ' || i.nameP || ' Apellido: ' || i.lastN ||'  Sexo: ' || i.sexP || ' Edad: ' || i.ageP );
  END LOOP;
END;

--8 - Generar un procedimiento que dando el nombre una mina que se ingresa por teclado
retorne la cantidad de trabajadores infectados con VIH.

CREATE OR REPLACE PROCEDURE infectados_VIH(mine mines.mine_name%TYPE)
AS
 num_infectados NUMBER;

BEGIN

SELECT COUNT(*) INTO num_infectados FROM persons p 
   INNER JOIN persons_medical_check pmc ON p.persons_id = pmc.persons_id
   INNER JOIN workers w ON p.persons_id = w.persons_id 
   INNER JOIN mines m ON w.mines_id = m.mines_id  WHERE LOWER(m.mine_name) = LOWER(mine) AND pmc.diagnostics_id = 2;
   DBMS_OUTPUT.PUT_LINE('Cantidad de infectados en la mina: '||mine|| ' es de : ' ||num_infectados||' infectados  ');
END;


--9 - Cree un procedimiento que muestre el mejor trabajador de cada mina.

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE mejor_trabajador
AS
var_person VARCHAR(300);

BEGIN

FOR i IN (SELECT m1.mine_name AS mine, q1.persons_id AS person, MAX(q1.suma) AS total_kilos FROM (
   SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma FROM product_worker pw
    INNER JOIN mines M ON pw.products_id = M.products_id GROUP BY M.mine_name, pw.persons_id)  
q1
 INNER JOIN (SELECT mine_name, MAX(suma) AS max_sum
    FROM (SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma FROM product_worker pw
     INNER JOIN mines M ON pw.products_id = M.products_id GROUP BY M.mine_name, pw.persons_id)  GROUP BY mine_name) 
     m1 ON q1.mine_name = m1.mine_name AND q1.suma = m1.max_sum GROUP BY m1.mine_name, q1.persons_id) LOOP

 SELECT NAME INTO var_person FROM persons WHERE persons_id= i.person;
    DBMS_OUTPUT.PUT_LINE('El trabajador: '||var_person||' |ID: '||I.person||' |fue el mejor  de la mina: '||UPPER(I.mine)||' |recolecto: '||I.total_kilos||'Kg');
   
   END LOOP;
END;
